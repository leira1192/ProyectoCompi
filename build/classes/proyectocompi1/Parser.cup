package proyectocompi1;
import java_cup.runtime.*;
import Node.Node;
import java.util.ArrayList;
import java.lang.reflect.*;


parser code {:
    
    ArrayList<String> errores = new ArrayList();
    Node Padre = new Node("Root",1,1);
    ArrayList<String> Recursivo = new ArrayList();
    
    @Override
    public void report_error(String message, Object info) {
        StringBuffer sb = new StringBuffer();
        sb.append( message + ":");
        if (info instanceof java_cup.runtime.Symbol) {
            sb.append("  Column: " + ((Symbol)info).left  +  ", Line: " + ((Symbol)info).right +". Se encontr√≥ un Token Inesperado: " 
                + getToken(((Symbol)info).sym) +  ". ");
        }
        errores.add(sb+"");
        System.err.println(sb + "");        
    }

    private String getToken(int id) {
        try {
          Field [] field = sym.class.getFields();
          for (int i = 0; i < field.length; i++) {
            if (field[i].getInt(null) == id) {
              return field[i].getName();
            }
          }
        } catch (Exception e) {          
        }
        return "Token Desconocido, Fufupapachon ha quebrado del todo";
      }
    
      
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
      report_fatal_error("", null);
    }
    
    @Override
    public int error_sync_size(){
        return 1;
    }
    :}
    ;
terminal TK_START;
terminal TK_END;
terminal TK_VARIABLE_TIPO;
terminal TK_BOOLEAN;
terminal TK_BREAK;
terminal TK_CASE;
terminal TK_CHAR;
terminal TK_STRING;
terminal TK_FUNC;
terminal TK_ELSE;
terminal TK_FOR;
terminal TK_DEFAULT;
terminal TK_INT;
terminal TK_IF;
terminal TK_THEN;
terminal TK_SWITCH;
terminal TK_RETURN;
terminal TK_WHILE;
terminal TK_PRINT;
terminal TK_INPUT;
terminal TK_NULL;
terminal TK_LPAREN;
terminal TK_RPAREN;
terminal TK_LBRACE;
terminal TK_RBRACE;
terminal TK_LBRACK;
terminal TK_RBRACK;
terminal TK_SEMICOLON;
terminal TK_COMMA;
terminal TK_DOT;
terminal TK_ASIG;
terminal TK_OPLOG;
terminal TK_OPMAT;
terminal TK_OPREL;
terminal TK_ADDLESS;
terminal ID;
terminal ENDLINE;
terminal WHITESPACE;
terminal COMMENT_BEGIN;
terminal COMMENT_END;
terminal INT;
terminal STRING;
terminal TK_ARRAY;
terminal CHAR;
terminal OR;
terminal AND;
terminal BOOLEAN;
terminal OPREL_NOT;
terminal PLUS;
terminal MINUS;
terminal TK_ELSEIF;
terminal TK_COMILLA;
terminal TK_COMILLASIMPLE;



non terminal Node Start;
non terminal ArrayList<Node> Main;
non terminal ArrayList<Node> Variables;
non terminal Node Valor;
non terminal ArrayList<Node> Array;
non terminal ArrayList<Node> ArrayContent;
non terminal ArrayList<Node> Content;
non terminal Node For;
non terminal ArrayList<Node> Body;
non terminal Node While;
non terminal Node BoolExp;
non terminal Node BoolExp2;
non terminal Node BoolExp3;
non terminal Node AritExp;
non terminal Node MultiExp;
non terminal Node Exp;
non terminal Node ArrayE;
non terminal Node Function;
non terminal Node FunctionPrime;
non terminal Node FunCall;
non terminal Node Sor;
non terminal Node If;
non terminal ArrayList<Node> Else;
non terminal ArrayList<Node> SwitchContent;
non terminal ArrayList<Node> Parametros;
non terminal Node Switch;
non terminal Node Asignar;
non terminal Node Imprimir;
non terminal ArrayList<Node> ImpContent;
non terminal Node ParametrosPrime;
non terminal ArrayList<Node> ParametrosFuncionLlamada;
non terminal Node ParametrosFuncionLlamadaPrime;
non terminal Node ValorImpresion;
non terminal Node Leer;
non terminal ArrayList<Node> VarMulti;
non terminal ArrayList<Node> VariablePrime;
non terminal Node Operador;
non terminal ArrayList<Node> AsignarValor;
non terminal Node OperacionAsignar;

precedence left PLUS;
precedence left MINUS;
precedence left TK_OPLOG;
precedence left TK_OPMAT;
precedence left OPREL_NOT;
precedence left TK_OPREL;
precedence left error;

Start::=TK_START VariablePrime:vp Main:m TK_END
    {:
        RESULT = parser.Padre;
        if(vp != null){
            Node temp = new Node("Var Init", vpright, vpleft);
            temp.addListNode(vp);
            RESULT.addNode(temp);
        }
        if(m != null){
            Node temp2 = new Node("Main", mright, mleft);
            temp2.addListNode(m);
            RESULT.addNode(temp2);    
        }
    :}
    ;

VariablePrime::= Variables:vs
    {:
        RESULT = vs;
    :}
    |
    {:
        RESULT = null;
    :}
    ;

/*Variables*/
Variables::= VarMulti:v
    {:RESULT = v;:}
    ;

VarMulti::= TK_VARIABLE_TIPO:vt ID:id TK_ASIG Valor:v  AsignarValor:av VariablePrime:vp
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(vt + "", vtright, vtleft);
        Node temp2 = new Node("ID: " + id, idright, idleft);
        Node temp3 = new Node(v.getVal() + "", vright, vleft);
        temp.addNode(temp2);
        temp.addNode(temp3);
        arreglo.add(temp);
        if (av != null){
            temp.addListNode(av);
        }
        if(vp != null){
            arreglo.addAll(vp);
        }
        RESULT = arreglo;
    :}
    |Array:ar VariablePrime:vp
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        if(ar != null){
            arreglo.addAll(ar);
        }
        RESULT = arreglo;
        if(vp != null){
            arreglo.addAll(vp);
        }
        RESULT = arreglo;
    :}
    ;

/*Valores de Variables Tipos*/
Valor::= INT:i 
    {:
        Node temp = new Node(i + "", iright, ileft);
        RESULT = temp;
    :}
    |STRING:s 
    {:
        Node temp = new Node(s + "", sright, sleft);
        RESULT = temp;
    :}
    |CHAR:c 
    {:
        Node temp = new Node(c + "", cright, cleft);
        RESULT = temp;
    :}
    |BOOLEAN:b 
    {:
        Node temp = new Node(b + "", bright, bleft);
        RESULT = temp;
    :}
    |ID:id 
    {:
        Node temp = new Node(id + "", idright, idleft);
        RESULT = temp;
    :}
    ;

/*Arreglo*/
Array::= TK_ARRAY:ar TK_DOT TK_VARIABLE_TIPO:vt TK_DOT INT:i ID:id TK_ASIG ArrayContent:ac
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(ar + "", arright, arleft);
        Node temp2 = new Node(vt + "", vtright, vtleft);
        Node temp3 = new Node("Size: " + i, iright, ileft);
        Node temp4 = new Node("ID: " + id, idright, idleft);
        temp.addNode(temp2);
        temp.addNode(temp3);
        temp.addNode(temp4);
        if(ac != null){
            temp.addListNode(ac);;
        }
        arreglo.add(temp);
        RESULT = arreglo;
    :}
    ;

ArrayContent::= TK_LBRACK Content:c TK_RBRACK
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        if(c != null){
            arreglo.addAll(c);
        }
        RESULT = arreglo;
    :}
    |TK_LBRACK TK_RBRACK
    {:RESULT = null;:}
    ;

Content::= Valor:v TK_COMMA Content:c
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node("val: " + v.getVal(), vright, vleft);
        arreglo.add(temp);
        if(c != null){
            arreglo.addAll(c);
        }
        RESULT = arreglo;
    :}
    |Valor:v
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node("val: " + v.getVal(), vright, vleft);
        arreglo.add(temp);
        RESULT = arreglo;
    :}
    ;

/*Cliclo*/
For::= TK_FOR:f TK_LPAREN TK_VARIABLE_TIPO:vt ID:id1 TK_ASIG:as INT:i1 TK_SEMICOLON ID:id2 TK_OPLOG:ol INT:i2 TK_SEMICOLON ID:id3 TK_ADDLESS:al TK_RPAREN Body:b
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(f + "", fright, fleft);
        Node temp1 = new Node(as + "", asright, asleft);
        Node temp2 = new Node("ID: " + id1, id1right, id1left);
        Node temp3 = new Node("Init: " + i1, i1right, i1left);
        temp1.addNode(temp2);
        temp1.addNode(temp3);
        Node temp4 = new Node("Operador: " + ol, olright, olleft);
        Node temp5 = new Node("ID: " + id2, id1right, id1left);
        Node temp6 = new Node("To: " + i2, i1right, i1left);
        temp4.addNode(temp5);
        temp4.addNode(temp6);
        Node temp7 = new Node("Add Less: " + al, alright, alleft);
        Node temp8 = new Node("ID: " + id3, id3right, id3left);
        temp7.addNode(temp8);
        temp.addNode(temp1);
        temp.addNode(temp4);
        temp.addNode(temp7);
        if(b != null){
            Node temp9 = new Node("Body", bright, bleft);
            temp9.addListNode(b);
            temp.addNode(temp9);
        }
        RESULT = temp;
    :}
    ;

Body::= TK_START Main:m TK_END
    {:
        if(m != null){
            RESULT = m;
        }else{
            RESULT = null;
        }
    :}
    ;

/*Ciclo While*/
While::= TK_WHILE:w TK_LPAREN BoolExp:be TK_RPAREN Body:b
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(w + "", wright, wleft);
        temp.addNode(be);
        if(b != null){
            temp.addListNode(b);
        }
        RESULT = temp;
    :}
    ;

BoolExp::= BoolExp:be OR:or BoolExp2:be2
    {:
        Node temp = new Node(or + "", orright, orleft);
        temp.addNode(be);
        temp.addNode(be2);
        RESULT = temp;
    :}
    |BoolExp2:be2
    {:
        RESULT = be2;
    :}
    ;

BoolExp2::= BoolExp2:be2 AND:and BoolExp3:be3
    {:
        Node temp = new Node(and + "", andright, andleft);
        temp.addNode(be2);
        temp.addNode(be3);
        RESULT = temp;
    :}
    |BoolExp3:be3
    {:
        RESULT = be3;
    :}
    ;

BoolExp3::= AritExp:ae Operador:o AritExp:ae2
    {:
        Node temp = new Node(o.getVal(), oright, oleft);
        temp.addNode(ae);
        temp.addNode(ae2);
        RESULT = temp;
    :}
    |BOOLEAN:b
    {:
        Node temp = new Node(b + "", bright, bleft);
        RESULT = temp;
    :}
    |TK_LPAREN BoolExp:be TK_RPAREN
    {:
        RESULT  = be;
    :}
    |OPREL_NOT:n TK_LPAREN BoolExp:be TK_RPAREN
    {:
        Node temp = new Node(n + "", nright, nleft);
        temp.addNode(be);
        RESULT = temp;
    :}
    ;

Operador::= TK_OPREL:op
    {:
        Node temp = new Node(op + "", opright, opleft);
        RESULT = temp;
    :}
    |TK_OPLOG:op
    {:
        Node temp = new Node(op + "", opright, opleft);
        RESULT = temp;
    :}
    ;

AritExp::= AritExp:ae Sor:sor MultiExp:me
    {:  
        Node temp = new Node(sor.getVal(), sorright, sorleft);
        temp.addNode(ae);
        temp.addNode(me);
        RESULT = temp;
    :}
    |MultiExp:me
    {:
        RESULT = me;
    :}
    ;

Sor::= MINUS:min
    {:
        Node temp = new Node(min + "", minright, minleft);
        RESULT = temp;
    :}
    |PLUS:max
    {:
        Node temp = new Node(max + "", maxright, maxleft);
        RESULT = temp;
    :}
    ;

MultiExp::= MultiExp:me TK_OPMAT:op Exp:e
    {:
        Node temp = new Node(op + "", opright, opleft);
        temp.addNode(me);
        temp.addNode(e);
        RESULT = temp;
    :}
    |Exp:e
    {:
        RESULT = e;
    :}
    ;

Exp::= ID:id
    {:
        Node temp = new Node(id + "", idright, idleft);
        RESULT = temp;
    :}
    |INT:i
    {:
        Node temp = new Node(i + "", iright, ileft);
        RESULT = temp;
    :}
    |CHAR:c
    {:
        Node temp = new Node(c + "", cright, cleft);
        RESULT = temp;
    :}
    |STRING:s
    {:
        Node temp = new Node(s + "", sright, sleft);
        RESULT = temp;
    :}
    |FunCall:fc
    {:
        RESULT = fc;
    :}
    |ArrayE:ae
    {:
        RESULT = ae;
    :}
    |TK_LPAREN AritExp:ae TK_RPAREN
    {:
        RESULT = ae;
    :}
    ;

ArrayE::= TK_LBRACK AritExp:ae TK_RBRACK
    {:
        RESULT = ae;
    :}
    ;


/*Bloque Decision IF*/
If::= TK_IF:i TK_LPAREN BoolExp:be TK_RPAREN Body:b Else:e
    {:
        Node temp = new Node(i + "", iright, ileft);
        temp.addNode(be);
        if(b != null){
            temp.addListNode(b);
        }
        if(e != null){
            temp.addListNode(e);
        }
        RESULT = temp;
    :}
    ;

Else::= TK_ELSEIF:ei TK_LPAREN BoolExp:be TK_RPAREN Body:b Else:e
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(ei + "", eiright, eileft);
        temp.addNode(be);
        if(b != null){
            temp.addListNode(b);
        }
        arreglo.add(temp);
        if(e != null){
            arreglo.addAll(e);
        }
        RESULT = arreglo;
    :}
    |TK_ELSE:e Body:b
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(e + "", eright, eleft);
        if(b != null){
            temp.addListNode(b);
        }
        arreglo.add(temp);
        RESULT = arreglo;
    :}
    |/*Vacio Solo IF*/
    {:
        RESULT = null;
    :}
    ;

Switch::= TK_SWITCH:sw TK_LPAREN ID:id TK_RPAREN SwitchContent:sc
    {:
        Node temp = new Node(sw + "", swright, swleft);
        Node temp2 = new Node(id + "", idright, idleft);
        temp.addNode(temp2);
        temp.addListNode(sc);
        RESULT = temp;
    :}
    ;

SwitchContent::= TK_CASE:c ID:id Body:b TK_BREAK TK_SEMICOLON SwitchContent:sc
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(c + "", cright, cleft);
        Node temp2 = new Node("ID: " + id, idright, idleft);
        temp.addNode(temp2);
        if(b != null){
            temp.addListNode(b);
        }
        arreglo.add(temp);
        arreglo.addAll(sc);
        RESULT = arreglo;
    :}
    |TK_DEFAULT:d Body:b TK_BREAK TK_SEMICOLON
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(d + "", dright, dleft);
        if(b != null){
            temp.addListNode(b);
        }
        arreglo.add(temp);
        RESULT = arreglo;
    :}
    ;

/*Funcion*/
FunctionPrime::= TK_FUNC:f Function:func
    {:
        RESULT = func;
    :}
    ;

Function::= ID:id TK_LPAREN ParametrosPrime:pp TK_RPAREN Body:b
    {:
        Node tempo = new Node("Recursivo: ", idright, idleft);
        Node temp = new Node("func", idright, idleft);
        Node temp2 = new Node(id + "", idright, idleft);
        temp.addNode(temp2);
        if(pp != null){
            temp.addNode(pp);
        }
        if(b != null){
            temp.addListNode(b);
        }
        RESULT = temp;
        if(this.parser.Recursivo.size() != 0){
            for(int i = 0; i < this.parser.Recursivo.size(); i++){
                if(this.parser.Recursivo.get(i).equals(id + "")){
                    tempo.addNode(temp);
                    RESULT = tempo;
                }
            }
        }else{
        }
    :}
    |TK_VARIABLE_TIPO:vt ID:id TK_LPAREN ParametrosPrime:pp TK_RPAREN TK_START Main:m TK_RETURN:r ID:id2 TK_END
    {:
        Node tempo = new Node("Recursivo: ", idright, idleft);
        Node temp = new Node("func", idright, idleft);
        Node temp2 = new Node("ID: " + id, idright, idleft);
        Node temp3 = new Node("Tipo: " + vt, vtright, vtleft);
        Node temp4 = new Node(r + "", rright, rleft);
        Node temp5 = new Node("ID: " + id2, id2right, id2left);
        temp4.addNode(temp5);
        temp.addNode(temp3);
        temp.addNode(temp2);
        if(pp != null){
            temp.addNode(pp);
        }
        if(m != null){
            temp.addListNode(m);
        }
        temp.addNode(temp4);
        RESULT = temp;
        if(this.parser.Recursivo.size() != 0){
            for(int i = 0; i < this.parser.Recursivo.size(); i++){
                if(this.parser.Recursivo.get(i).equals(id + "")){
                    tempo.addNode(temp);
                    RESULT = tempo;
                }
            }
        }else{
        }
    :}
    ;

ParametrosPrime::= Parametros:ps
    {:
        Node temp = new Node("Parametros", psright, psleft);
        temp.addListNode(ps);
        RESULT = temp;
    :}
    | /*Vacio*/
    {:
        RESULT = null;
    :}
    ;

Parametros::= TK_VARIABLE_TIPO:vt ID:id TK_COMMA Parametros:ps
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node("Var", vtright, vtleft);
        Node temp2 = new Node(vt + "", vtright, vtleft);
        Node temp3 = new Node("ID: " + id, idright, idleft);
        temp.addNode(temp2);
        temp.addNode(temp3);
        arreglo.add(temp);
        arreglo.addAll(ps);
        RESULT = arreglo;
    :}
    |TK_ARRAY:a ID:id TK_COMMA Parametros:ps
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node("Var", aright, aleft);
        Node temp2 = new Node(a + "", aright, aleft);
        Node temp3 = new Node("ID: " + id, idright, idleft);
        temp.addNode(temp2);
        temp.addNode(temp3);
        arreglo.add(temp);
        arreglo.addAll(ps);
        RESULT = arreglo;
    :}
    |TK_ARRAY:a ID:id
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node("Var", aright, aleft);
        Node temp2 = new Node(a + "", aright, aleft);
        Node temp3 = new Node("ID: " + id, idright, idleft);
        temp.addNode(temp2);
        temp.addNode(temp3);
        arreglo.add(temp);
        RESULT = arreglo;
    :}
    |TK_VARIABLE_TIPO:vt ID:id
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node("Var", vtright, vtleft);
        Node temp2 = new Node(vt + "", vtright, vtleft);
        Node temp3 = new Node("ID: " + id, idright, idleft);
        temp.addNode(temp2);
        temp.addNode(temp3);
        arreglo.add(temp);
        RESULT = arreglo;
    :}
    ;

FunCall::= TK_SEMICOLON ID:id TK_LPAREN ParametrosFuncionLlamadaPrime:pflp TK_RPAREN
    {:
        this.parser.Recursivo.add(id + "");
        Node temp = new Node("FunCall", idright, idleft);
        Node temp2 = new Node(id + "", idright, idleft);
        temp.addNode(temp2);
        if(pflp != null){
            temp.addNode(pflp);
        }
        RESULT = temp;
    :}
    ;

ParametrosFuncionLlamadaPrime::= ParametrosFuncionLlamada:pfl
    {:
        Node temp = new Node("Parametros", pflright, pflleft);
        temp.addListNode(pfl);
        RESULT = temp;
    :}
    | /*Vacio*/
    {:
        RESULT = null;
    :}
    ;

ParametrosFuncionLlamada::= ID:id TK_COMMA ParametrosFuncionLlamada:pfl
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node("ID: " + id, idright, idleft);
        arreglo.add(temp);
        arreglo.addAll(pfl);
        RESULT = arreglo;
    :}
    |ID:id
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node("ID: " + id, idright, idleft);
        arreglo.add(temp);
        RESULT = arreglo;
    :}
    ;


Asignar::= TK_SEMICOLON ID:id TK_ASIG:a Valor:v AsignarValor:av
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(a + "", aright, aleft);
        Node temp2 = new Node("ID: " + id, idright, idleft);
        Node temp3 = new Node(v.getVal() + "", vright, vleft);
        temp.addNode(temp2);
        temp.addNode(temp3);
        if(av != null){
            temp.addListNode(av);
        }
        RESULT = temp;
    :}
    ;

AsignarValor::= OperacionAsignar:oa Valor:v AsignarValor:av
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(oa.getVal() + "", oaright, oaleft);
        Node temp2 = new Node(v.getVal() + "", vright, vleft);
        temp.addNode(temp2);
        arreglo.add(temp);
        if (av != null){
            arreglo.addAll(av);
        }
        RESULT = arreglo;
    :}
    | /*Vacio*/
    {:
        RESULT = null;
    :}
    ;

OperacionAsignar::= MINUS:min
    {:
        Node temp = new Node(min + "", minright, minleft);
        RESULT = temp;
    :}
    |PLUS:mas
    {:
        Node temp = new Node(mas + "", masright, masleft);
        RESULT = temp;
    :}
    |TK_OPMAT:op
    {:
        Node temp = new Node(op + "", opright, opleft);
        RESULT = temp;
    :}
    ;
Imprimir::= TK_SEMICOLON TK_PRINT:p TK_LBRACK ImpContent:ic TK_RBRACK 
    {:
        Node temp = new Node(p + "", pright, pleft);
        temp.addListNode(ic);
        RESULT = temp;
    :}
    ;

ImpContent::= STRING:s PLUS ImpContent:ic
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(s + "", sright, sleft);
        arreglo.add(temp);
        arreglo.addAll(ic);
        RESULT = arreglo;
    :}
    | STRING:s
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(s + "", sright, sleft);
        arreglo.add(temp);
        RESULT = arreglo;
    :} /*Termina impresion*/
    |ValorImpresion:vi PLUS ImpContent:ic
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(vi.getVal(), viright, vileft);
        arreglo.add(temp);
        arreglo.addAll(ic);
        RESULT = arreglo;
    :}
    |ValorImpresion:vi
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(vi.getVal(), viright, vileft);
        arreglo.add(temp);
        RESULT = arreglo;
    :}
    ;

ValorImpresion::= ID:id 
    {:
        Node temp = new Node(id + "", idright, idleft);
        RESULT = temp;
    :}
    |FunCall:fc 
    {:
        RESULT = fc;
    :}
    ;

Leer::= TK_SEMICOLON TK_INPUT:i ID:id
    {:
        Node temp = new Node("Read", iright, ileft);
        Node temp2 = new Node("ID: " + id, idright, idleft);
        temp.addNode(temp2);
        RESULT = temp;
    :}
    ;

Main::= For:f Main:m
    {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(f);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    :}
    |While:w Main:m {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(w);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    :}
    |If:i Main:m {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(i);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    :}
    |Switch:s Main:m {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(s);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    :}
    |FunctionPrime:fnp Main:m {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(fnp);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    :}
    |FunCall:fc Main:m {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(fc);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    :}
    |Imprimir:imp Main:m {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(imp);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    :}
    |Leer:l Main:m {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(l);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    :}
    |Asignar:a Main:m {:
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(a);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    :}
    |
    {:
        RESULT = null;
    :} /*Vacio para terminar*/
    |error Main
    ;