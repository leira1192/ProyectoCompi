package proyectocompi1;
import java_cup.runtime.*;
import Node.Node;
import java.util.ArrayList;
import java.lang.reflect.*;


parser code {:
    ArrayList<String> errores = new ArrayList();

    @Override
    public void report_error(String message, Object info) {
        StringBuffer sb = new StringBuffer();
        sb.append( message + ":");
        if (info instanceof java_cup.runtime.Symbol) {
            sb.append("  Column: " + ((Symbol)info).left  +  ", Line: " + ((Symbol)info).right +". Unexpected token: " 
                + getToken(((Symbol)info).sym) +  ". ");
        }
        errores.add(sb+"");
        System.err.println(sb + "");        
    }

    private String getToken(int id) {
        try {
          Field [] field = sym.class.getFields();
          for (int i = 0; i < field.length; i++) {
            if (field[i].getInt(null) == id) {
              return field[i].getName();
            }
          }
        } catch (Exception e) {          
        }
        return "Token Desconocido, Fufupapachon ha quebrado del todo";
      }
    
      
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
      report_fatal_error("", null);
    }
    
    @Override
    public int error_sync_size(){
        return 1;
    }
    :}
    ;
terminal TK_START;
terminal TK_END;
terminal TK_VARIABLE_TIPO;
terminal TK_BOOLEAN;
terminal TK_BREAK;
terminal TK_CASE;
terminal TK_CHAR;
terminal TK_STRING;
terminal TK_FUNC;
terminal TK_ELSE;
terminal TK_FOR;
terminal TK_DEFAULT;
terminal TK_INT;
terminal TK_IF;
terminal TK_THEN;
terminal TK_SWITCH;
terminal TK_RETURN;
terminal TK_WHILE;
terminal TK_PRINT;
terminal TK_INPUT;
terminal TK_TRUE;
terminal TK_FALSE;
terminal TK_NULL;
terminal TK_LPAREN;
terminal TK_RPAREN;
terminal TK_LBRACE;
terminal TK_RBRACE;
terminal TK_LBRACK;
terminal TK_RBRACK;
terminal TK_SEMICOLON;
terminal TK_COMMA;
terminal TK_DOT;
terminal TK_ASIG;
terminal TK_OPLOG;
terminal TK_OPMAT;
terminal TK_OPREL;
terminal TK_PLUSPLUS;
terminal TK_MINUSMINUS;
terminal TK_ADDLESS;
terminal ID;
terminal ENDLINE;
terminal WHITESPACE;
terminal COMMENT_BEGIN;
terminal COMMENT_END;
terminal LETRA;
terminal DIGIT;
terminal INT;
terminal STRING;
terminal TK_ARRAY;
terminal CHAR;
terminal OR;
terminal AND;
terminal BOOLEAN;
terminal OPREL_NOT;
terminal PLUS;
terminal MINUS;
terminal TK_ELSEIF;
terminal TK_COMILLA;



non terminal Node Start;
non terminal ArrayList<Node> Main;
non terminal Node Variables;
non terminal Node Valor;
non terminal Node Array;
non terminal Node ArrayContent;
non terminal ArrayList<Node> Content;
non terminal Node For;
non terminal Node Body;
non terminal Node While;
non terminal Node BoolExp;
non terminal Node BoolExp2;
non terminal Node BoolExp3;
non terminal Node AritExp;
non terminal Node MultiExp;
non terminal Node Exp;
non terminal Node ArrayE;
non terminal Node Function;
non terminal Node FunCall;
non terminal Node Sor;
non terminal Node If;
non terminal Node Else;
non terminal ArrayList<Node> SwitchContent;
non terminal ArrayList<Node> Parametros;
non terminal Node Switch;
non terminal Node Asignar;
non terminal Node Imprimir;
non terminal ArrayList<Node> ImpContent;
non terminal Node ParametrosPrime;
non terminal ArrayList<Node> ParametrosFuncionLlamada;
non terminal Node ParametrosFuncionLlamadaPrime;
non terminal Node ValorImpresion;
non terminal Node Leer;
non terminal Node VarMulti;
non terminal Node VariablePrime;

Start::=TK_START VariablePrime:vp Main:m TK_END
    {::}
    ;

VariablePrime::= Variables:vs
    {::}
    |
    {::}
    ;

/*Variables*/
Variables::= VarMulti:v
    {::}
    ;

VarMulti::= TK_VARIABLE_TIPO:vt ID:id TK_ASIG Valor:v  VariablePrime:vp
    {::}
    |Array:ar VariablePrime:vp
    {::}
    ;

/*Valores de Variables Tipos*/
Valor::= INT:i {::}
    |STRING:s {::}
    |CHAR:l {::}
    |TK_TRUE:t {::}
    |TK_FALSE:f {::}
    |ID:id {::}
    ;

/*Arreglo*/
Array::= TK_ARRAY:ar TK_DOT TK_VARIABLE_TIPO:vt TK_DOT INT:i ID:id TK_ASIG ArrayContent
    {::}
    ;

ArrayContent::= TK_LBRACK Content:c TK_RBRACK
    {::}
    |TK_LBRACK TK_RBRACK
    ;

Content::= Valor:v TK_COMMA Content:c
    {::}
    |Valor:v
    ;

/*Cliclo FOR*/
For::= TK_FOR TK_LPAREN TK_INT ID:id1 TK_ASIG INT:i1 TK_SEMICOLON ID:id2 TK_OPLOG INT:i2 TK_SEMICOLON ID:id3 TK_ADDLESS:al TK_RPAREN Body:b
    {::}
    ;

Body::= TK_START Main:m TK_END
    {::}
    ;

/*Ciclo While*/
While::= TK_WHILE TK_LPAREN BoolExp:be TK_RPAREN Body:b
    {::}
    ;

BoolExp::= BoolExp:be OR BoolExp2:be2
    {::}
    |BoolExp2:be2
    {::}
    ;

BoolExp2::= BoolExp2:be2 AND BoolExp3:be3
    {::}
    |BoolExp3:be3
    {::}
    ;

BoolExp3::= AritExp:ae TK_OPREL:op AritExp:ae2
    {::}
    |BOOLEAN:b
    {::}
    |TK_LPAREN BoolExp:be TK_RPAREN
    {::}
    |OPREL_NOT TK_LPAREN BoolExp:be TK_RPAREN
    {::}
    ;

AritExp::= AritExp:ae Sor:sor MultiExp:me
    {::}
    |Exp:e
    {::}
    ;

Sor::= MINUS:min
    {::}
    |PLUS:max
    {::}
    ;

MultiExp::= MultiExp:me TK_OPMAT Exp:e
    {::}
    |Exp:e
    {::}
    ;

Exp::= ID:id
    {::}
    |INT:i
    {::}
    |CHAR:c
    {::}
    |STRING:s
    {::}
    |FunCall:fc
    {::}
    |ArrayE:ae
    {::}
    |TK_LPAREN AritExp:ae TK_RPAREN
    {::}
    ;

ArrayE::= TK_LBRACK AritExp:ae TK_RBRACK
    {::}
    ;


/*Bloque Decision IF*/
If::= TK_IF TK_LPAREN BoolExp:be TK_RPAREN Body:b Else:e
    {::}
    ;

Else::= TK_ELSEIF TK_LPAREN BoolExp:be TK_RPAREN Body:b Else:e
    {::}
    |TK_ELSE Body:b
    {::}
    |/*Vacio Solo IF*/
    {::}
    ;

Switch::= TK_SWITCH TK_LPAREN ID:id TK_RPAREN SwitchContent:sc
    {::}
    ;

SwitchContent::= TK_CASE ID:id Body:b TK_BREAK TK_SEMICOLON SwitchContent:sc
    {::}
    |TK_DEFAULT Body:b TK_BREAK TK_SEMICOLON
    {::}
    ;

/*Funcion*/
Function::= TK_FUNC ID:id TK_LPAREN ParametrosPrime:pp TK_RPAREN Body:b
    {::}
    ;

ParametrosPrime::= Parametros:ps
    {::}
    | /*Vacio*/
    {::}
    ;

Parametros::= TK_VARIABLE_TIPO:vt ID:id TK_COMMA Parametros:ps
    {::}
    |TK_ARRAY:a ID:id TK_COMMA Parametros:ps
    {::}
    |TK_ARRAY:a ID:id
    {::}
    |TK_VARIABLE_TIPO:vt ID:id
    {::}
    ;

FunCall::= TK_SEMICOLON ID:id TK_LPAREN ParametrosFuncionLlamadaPrime:pflp TK_RPAREN
    {::}
    ;

ParametrosFuncionLlamadaPrime::= ParametrosFuncionLlamada:pfl
    {::}
    | /*Vacio*/
    {::}
    ;

ParametrosFuncionLlamada::= ID:id TK_COMMA ParametrosFuncionLlamada:pfl
    {::}
    |ID:id
    {::}
    ;


Asignar::= TK_SEMICOLON ID:id TK_ASIG Valor:v
    {::}
    ;

Imprimir::= TK_SEMICOLON TK_PRINT TK_LBRACK ImpContent:ic TK_RBRACK 
    {::}
    ;

ImpContent::= TK_COMILLA STRING:s TK_COMILLA PLUS ImpContent:ic
    {::}
    |TK_COMILLA STRING:s TK_COMILLA
    {::} /*Termina impresion*/
    |ValorImpresion:vi PLUS ImpContent:ic
    {::}
    |ValorImpresion:vi
    {::}
    ;

ValorImpresion::= ID:id {::}
    |FunCall:fc {::}
    ;

Leer::= TK_SEMICOLON TK_INPUT ID:id
    {::}
    ;

Main::= For:f Main:m {::}
    |While:w Main:m {::}
    |If:i Main:m {::}
    |Switch:s Main:m {::}
    |Function:fn Main:m {::}
    |FunCall:fc Main:m {::}
    |Imprimir:imp Main:m {::}
    |Leer:l Main:m {::}
    |Asignar:a Main:m {::}
    |{::} /*Vacio para terminar*/
    |error Main
    ;