
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 17 10:59:21 CST 2018
//----------------------------------------------------

package proyectocompi1;

import java_cup.runtime.*;
import Node.Node;
import java.util.ArrayList;
import java.lang.reflect.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 17 10:59:21 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\006\000\002\002\004\000\002\047" +
    "\003\000\002\047\002\000\002\005\003\000\002\046\010" +
    "\000\002\046\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\007\012\000\002\010\005\000\002\010\004\000\002\011" +
    "\005\000\002\011\003\000\002\012\021\000\002\013\005" +
    "\000\002\014\005\000\002\015\007\000\002\016\005\000" +
    "\002\016\003\000\002\017\005\000\002\017\003\000\002" +
    "\020\005\000\002\020\003\000\002\020\005\000\002\020" +
    "\006\000\002\050\003\000\002\050\003\000\002\021\005" +
    "\000\002\021\003\000\002\030\003\000\002\030\003\000" +
    "\002\022\005\000\002\022\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\005\000\002\024\005" +
    "\000\002\031\010\000\002\032\010\000\002\032\004\000" +
    "\002\032\002\000\002\035\007\000\002\033\010\000\002" +
    "\033\006\000\002\026\004\000\002\025\007\000\002\025" +
    "\014\000\002\041\003\000\002\041\002\000\002\034\006" +
    "\000\002\034\006\000\002\034\004\000\002\034\004\000" +
    "\002\027\007\000\002\043\003\000\002\043\002\000\002" +
    "\042\005\000\002\042\003\000\002\036\007\000\002\051" +
    "\005\000\002\051\002\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\037\007\000\002\040\005\000" +
    "\002\040\003\000\002\040\005\000\002\040\003\000\002" +
    "\044\003\000\002\044\003\000\002\045\005\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\002\000\002" +
    "\003\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\002\000" +
    "\002\004\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\004\004\005\001\002\000\004\002\350\001" +
    "\002\000\026\003\ufffe\005\ufffe\006\006\014\ufffe\016\ufffe" +
    "\021\ufffe\023\ufffe\025\ufffe\037\ufffe\056\012\001\002\000" +
    "\004\047\343\001\002\000\022\003\ufffd\005\ufffd\014\ufffd" +
    "\016\ufffd\021\ufffd\023\ufffd\025\ufffd\037\ufffd\001\002\000" +
    "\022\003\056\005\uffa8\014\047\016\055\021\046\023\040" +
    "\025\060\037\051\001\002\000\026\003\ufffe\005\ufffe\006" +
    "\006\014\ufffe\016\ufffe\021\ufffe\023\ufffe\025\ufffe\037\ufffe" +
    "\056\012\001\002\000\004\041\014\001\002\000\022\003" +
    "\uffff\005\uffff\014\uffff\016\uffff\021\uffff\023\uffff\025\uffff" +
    "\037\uffff\001\002\000\004\006\015\001\002\000\004\041" +
    "\016\001\002\000\004\054\017\001\002\000\004\047\020" +
    "\001\002\000\004\042\021\001\002\000\004\035\022\001" +
    "\002\000\016\036\027\047\024\054\032\055\025\057\030" +
    "\062\031\001\002\000\026\003\ufff5\005\ufff5\006\ufff5\014" +
    "\ufff5\016\ufff5\021\ufff5\023\ufff5\025\ufff5\037\ufff5\056\ufff5" +
    "\001\002\000\042\003\ufff6\005\ufff6\006\ufff6\014\ufff6\016" +
    "\ufff6\021\ufff6\023\ufff6\024\ufff6\025\ufff6\036\ufff6\037\ufff6" +
    "\040\ufff6\044\ufff6\056\ufff6\064\ufff6\065\ufff6\001\002\000" +
    "\042\003\ufff9\005\ufff9\006\ufff9\014\ufff9\016\ufff9\021\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\036\ufff9\037\ufff9\040\ufff9\044" +
    "\ufff9\056\ufff9\064\ufff9\065\ufff9\001\002\000\004\036\036" +
    "\001\002\000\026\003\ufff3\005\ufff3\006\ufff3\014\ufff3\016" +
    "\ufff3\021\ufff3\023\ufff3\025\ufff3\037\ufff3\056\ufff3\001\002" +
    "\000\042\003\ufff8\005\ufff8\006\ufff8\014\ufff8\016\ufff8\021" +
    "\ufff8\023\ufff8\024\ufff8\025\ufff8\036\ufff8\037\ufff8\040\ufff8" +
    "\044\ufff8\056\ufff8\064\ufff8\065\ufff8\001\002\000\042\003" +
    "\ufff7\005\ufff7\006\ufff7\014\ufff7\016\ufff7\021\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\036\ufff7\037\ufff7\040\ufff7\044\ufff7\056" +
    "\ufff7\064\ufff7\065\ufff7\001\002\000\042\003\ufffa\005\ufffa" +
    "\006\ufffa\014\ufffa\016\ufffa\021\ufffa\023\ufffa\024\ufffa\025" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\044\ufffa\056\ufffa\064\ufffa" +
    "\065\ufffa\001\002\000\006\036\ufff1\040\034\001\002\000" +
    "\014\047\024\054\032\055\025\057\030\062\031\001\002" +
    "\000\004\036\ufff2\001\002\000\026\003\ufff4\005\ufff4\006" +
    "\ufff4\014\ufff4\016\ufff4\021\ufff4\023\ufff4\025\ufff4\037\ufff4" +
    "\056\ufff4\001\002\000\022\003\ufffb\005\ufffb\014\ufffb\016" +
    "\ufffb\021\ufffb\023\ufffb\025\ufffb\037\ufffb\001\002\000\004" +
    "\031\325\001\002\000\024\003\056\005\uffa8\014\047\016" +
    "\055\021\046\023\040\024\uffa8\025\060\037\051\001\002" +
    "\000\024\003\056\005\uffa8\014\047\016\055\021\046\023" +
    "\040\024\uffa8\025\060\037\051\001\002\000\024\003\056" +
    "\005\uffa8\014\047\016\055\021\046\023\040\024\uffa8\025" +
    "\060\037\051\001\002\000\024\003\056\005\uffa8\014\047" +
    "\016\055\021\046\023\040\024\uffa8\025\060\037\051\001" +
    "\002\000\024\003\056\005\uffa8\014\047\016\055\021\046" +
    "\023\040\024\uffa8\025\060\037\051\001\002\000\004\031" +
    "\303\001\002\000\006\006\226\047\225\001\002\000\024" +
    "\003\056\005\uffa8\014\047\016\055\021\046\023\040\024" +
    "\uffa8\025\060\037\051\001\002\000\010\026\175\027\176" +
    "\047\174\001\002\000\024\003\056\005\uffa8\014\047\016" +
    "\055\021\046\023\040\024\uffa8\025\060\037\051\001\002" +
    "\000\024\003\056\005\uffa8\014\047\016\055\021\046\023" +
    "\040\024\uffa8\025\060\037\051\001\002\000\004\005\171" +
    "\001\002\000\004\031\153\001\002\000\024\003\056\005" +
    "\uffa8\014\047\016\055\021\046\023\040\024\uffa8\025\060" +
    "\037\051\001\002\000\024\003\056\005\uffa8\014\047\016" +
    "\055\021\046\023\040\024\uffa8\025\060\037\051\001\002" +
    "\000\004\031\061\001\002\000\024\031\065\035\064\037" +
    "\073\047\074\054\062\055\072\057\102\062\067\063\101" +
    "\001\002\000\024\032\uffdb\036\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\060\uffdb\061\uffdb\064\uffdb\065\uffdb\001\002\000\024" +
    "\032\uffd7\036\uffd7\043\uffd7\044\uffd7\045\uffd7\060\uffd7\061" +
    "\uffd7\064\uffd7\065\uffd7\001\002\000\020\031\113\035\064" +
    "\037\073\047\074\054\062\055\072\057\102\001\002\000" +
    "\024\031\065\035\064\037\073\047\074\054\062\055\072" +
    "\057\102\062\067\063\101\001\002\000\012\043\141\045" +
    "\142\064\116\065\117\001\002\000\010\032\uffe7\060\uffe7" +
    "\061\uffe7\001\002\000\006\032\133\060\106\001\002\000" +
    "\024\032\uffdd\036\uffdd\043\uffdd\044\uffdd\045\uffdd\060\uffdd" +
    "\061\uffdd\064\uffdd\065\uffdd\001\002\000\024\032\uffd9\036" +
    "\uffd9\043\uffd9\044\uffd9\045\uffd9\060\uffd9\061\uffd9\064\uffd9" +
    "\065\uffd9\001\002\000\004\047\123\001\002\000\024\032" +
    "\uffdc\036\uffdc\043\uffdc\044\uffdc\045\uffdc\060\uffdc\061\uffdc" +
    "\064\uffdc\065\uffdc\001\002\000\024\032\uffd8\036\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\060\uffd8\061\uffd8\064\uffd8\065\uffd8" +
    "\001\002\000\024\032\uffe1\036\uffe1\043\uffe1\044\112\045" +
    "\uffe1\060\uffe1\061\uffe1\064\uffe1\065\uffe1\001\002\000\010" +
    "\032\uffe9\060\uffe9\061\uffe9\001\002\000\010\032\uffeb\060" +
    "\uffeb\061\110\001\002\000\004\031\103\001\002\000\024" +
    "\032\uffda\036\uffda\043\uffda\044\uffda\045\uffda\060\uffda\061" +
    "\uffda\064\uffda\065\uffda\001\002\000\024\031\065\035\064" +
    "\037\073\047\074\054\062\055\072\057\102\062\067\063" +
    "\101\001\002\000\006\032\105\060\106\001\002\000\010" +
    "\032\uffe5\060\uffe5\061\uffe5\001\002\000\024\031\065\035" +
    "\064\037\073\047\074\054\062\055\072\057\102\062\067" +
    "\063\101\001\002\000\010\032\uffec\060\uffec\061\110\001" +
    "\002\000\024\031\065\035\064\037\073\047\074\054\062" +
    "\055\072\057\102\062\067\063\101\001\002\000\010\032" +
    "\uffea\060\uffea\061\uffea\001\002\000\020\031\113\035\064" +
    "\037\073\047\074\054\062\055\072\057\102\001\002\000" +
    "\020\031\113\035\064\037\073\047\074\054\062\055\072" +
    "\057\102\001\002\000\024\032\uffde\036\uffde\043\uffde\044" +
    "\uffde\045\uffde\060\uffde\061\uffde\064\uffde\065\uffde\001\002" +
    "\000\010\032\121\064\116\065\117\001\002\000\020\031" +
    "\uffdf\035\uffdf\037\uffdf\047\uffdf\054\uffdf\055\uffdf\057\uffdf" +
    "\001\002\000\020\031\uffe0\035\uffe0\037\uffe0\047\uffe0\054" +
    "\uffe0\055\uffe0\057\uffe0\001\002\000\020\031\113\035\064" +
    "\037\073\047\074\054\062\055\072\057\102\001\002\000" +
    "\024\032\uffd6\036\uffd6\043\uffd6\044\uffd6\045\uffd6\060\uffd6" +
    "\061\uffd6\064\uffd6\065\uffd6\001\002\000\024\032\uffe2\036" +
    "\uffe2\043\uffe2\044\112\045\uffe2\060\uffe2\061\uffe2\064\uffe2" +
    "\065\uffe2\001\002\000\004\031\124\001\002\000\006\032" +
    "\uffc2\047\125\001\002\000\006\032\uffc0\040\131\001\002" +
    "\000\004\032\130\001\002\000\004\032\uffc3\001\002\000" +
    "\046\003\uffc4\005\uffc4\014\uffc4\016\uffc4\021\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\032\uffc4\036\uffc4\037\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\060\uffc4\061\uffc4\064\uffc4\065\uffc4\001\002" +
    "\000\004\047\125\001\002\000\004\032\uffc1\001\002\000" +
    "\004\004\135\001\002\000\024\003\uffed\005\uffed\014\uffed" +
    "\016\uffed\021\uffed\023\uffed\024\uffed\025\uffed\037\uffed\001" +
    "\002\000\022\003\056\005\uffa8\014\047\016\055\021\046" +
    "\023\040\025\060\037\051\001\002\000\004\005\137\001" +
    "\002\000\032\003\uffef\005\uffef\010\uffef\014\uffef\015\uffef" +
    "\016\uffef\021\uffef\023\uffef\024\uffef\025\uffef\037\uffef\066" +
    "\uffef\001\002\000\020\031\113\035\064\037\073\047\074" +
    "\054\062\055\072\057\102\001\002\000\020\031\uffe3\035" +
    "\uffe3\037\uffe3\047\uffe3\054\uffe3\055\uffe3\057\uffe3\001\002" +
    "\000\020\031\uffe4\035\uffe4\037\uffe4\047\uffe4\054\uffe4\055" +
    "\uffe4\057\uffe4\001\002\000\014\032\uffe8\060\uffe8\061\uffe8" +
    "\064\116\065\117\001\002\000\014\032\121\043\141\045" +
    "\142\064\116\065\117\001\002\000\006\032\146\060\106" +
    "\001\002\000\010\032\uffe6\060\uffe6\061\uffe6\001\002\000" +
    "\010\036\150\064\116\065\117\001\002\000\024\032\uffd5" +
    "\036\uffd5\043\uffd5\044\uffd5\045\uffd5\060\uffd5\061\uffd5\064" +
    "\uffd5\065\uffd5\001\002\000\006\005\uffa9\024\uffa9\001\002" +
    "\000\006\005\uffa7\024\uffa7\001\002\000\004\006\154\001" +
    "\002\000\004\047\155\001\002\000\004\042\156\001\002" +
    "\000\004\054\157\001\002\000\004\037\160\001\002\000" +
    "\004\047\161\001\002\000\004\043\162\001\002\000\004" +
    "\054\163\001\002\000\004\037\164\001\002\000\004\047" +
    "\165\001\002\000\004\046\166\001\002\000\004\032\167" +
    "\001\002\000\004\004\135\001\002\000\024\003\ufff0\005" +
    "\ufff0\014\ufff0\016\ufff0\021\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\037\ufff0\001\002\000\004\002\001\001\002\000\006\005" +
    "\uffb1\024\uffb1\001\002\000\006\005\uffac\024\uffac\001\002" +
    "\000\006\031\124\042\213\001\002\000\004\035\200\001" +
    "\002\000\004\047\177\001\002\000\024\003\uffb2\005\uffb2" +
    "\014\uffb2\016\uffb2\021\uffb2\023\uffb2\024\uffb2\025\uffb2\037" +
    "\uffb2\001\002\000\010\037\073\047\201\055\204\001\002" +
    "\000\006\036\uffb4\064\uffb4\001\002\000\004\036\212\001" +
    "\002\000\006\036\uffb5\064\210\001\002\000\006\036\uffb7" +
    "\064\206\001\002\000\006\036\uffb3\064\uffb3\001\002\000" +
    "\010\037\073\047\201\055\204\001\002\000\004\036\uffb8" +
    "\001\002\000\010\037\073\047\201\055\204\001\002\000" +
    "\004\036\uffb6\001\002\000\024\003\uffb9\005\uffb9\014\uffb9" +
    "\016\uffb9\021\uffb9\023\uffb9\024\uffb9\025\uffb9\037\uffb9\001" +
    "\002\000\014\047\024\054\032\055\025\057\030\062\031" +
    "\001\002\000\032\003\uffbd\005\uffbd\014\uffbd\016\uffbd\021" +
    "\uffbd\023\uffbd\024\uffbd\025\uffbd\037\uffbd\044\215\064\216" +
    "\065\221\001\002\000\014\047\uffba\054\uffba\055\uffba\057" +
    "\uffba\062\uffba\001\002\000\014\047\uffbb\054\uffbb\055\uffbb" +
    "\057\uffbb\062\uffbb\001\002\000\024\003\uffbf\005\uffbf\014" +
    "\uffbf\016\uffbf\021\uffbf\023\uffbf\024\uffbf\025\uffbf\037\uffbf" +
    "\001\002\000\014\047\024\054\032\055\025\057\030\062" +
    "\031\001\002\000\014\047\uffbc\054\uffbc\055\uffbc\057\uffbc" +
    "\062\uffbc\001\002\000\036\003\uffbd\005\uffbd\006\uffbd\014" +
    "\uffbd\016\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd\037\uffbd" +
    "\044\215\056\uffbd\064\216\065\221\001\002\000\030\003" +
    "\uffbe\005\uffbe\006\uffbe\014\uffbe\016\uffbe\021\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\037\uffbe\056\uffbe\001\002\000\006\005" +
    "\uffad\024\uffad\001\002\000\004\031\252\001\002\000\004" +
    "\047\230\001\002\000\024\003\uffcd\005\uffcd\014\uffcd\016" +
    "\uffcd\021\uffcd\023\uffcd\024\uffcd\025\uffcd\037\uffcd\001\002" +
    "\000\004\031\231\001\002\000\010\006\232\032\uffc9\056" +
    "\234\001\002\000\004\047\247\001\002\000\004\032\241" +
    "\001\002\000\004\047\236\001\002\000\004\032\uffca\001" +
    "\002\000\006\032\uffc6\040\237\001\002\000\006\006\232" +
    "\056\234\001\002\000\004\032\uffc7\001\002\000\004\004" +
    "\242\001\002\000\022\003\056\014\047\016\055\021\046" +
    "\023\040\024\uffa8\025\060\037\051\001\002\000\004\024" +
    "\244\001\002\000\004\047\245\001\002\000\004\005\246" +
    "\001\002\000\024\003\uffcb\005\uffcb\014\uffcb\016\uffcb\021" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\037\uffcb\001\002\000\006" +
    "\032\uffc5\040\250\001\002\000\006\006\232\056\234\001" +
    "\002\000\004\032\uffc8\001\002\000\010\006\232\032\uffc9" +
    "\056\234\001\002\000\004\032\254\001\002\000\004\004" +
    "\256\001\002\000\024\003\uffcc\005\uffcc\014\uffcc\016\uffcc" +
    "\021\uffcc\023\uffcc\024\uffcc\025\uffcc\037\uffcc\001\002\000" +
    "\020\003\267\005\uff9e\016\055\021\046\023\040\025\060" +
    "\037\051\001\002\000\020\003\267\005\uff9e\016\055\021" +
    "\046\023\040\025\060\037\051\001\002\000\020\003\267" +
    "\005\uff9e\016\055\021\046\023\040\025\060\037\051\001" +
    "\002\000\020\003\267\005\uff9e\016\055\021\046\023\040" +
    "\025\060\037\051\001\002\000\020\003\267\005\uff9e\016" +
    "\055\021\046\023\040\025\060\037\051\001\002\000\020" +
    "\003\267\005\uff9e\016\055\021\046\023\040\025\060\037" +
    "\051\001\002\000\004\005\275\001\002\000\020\003\267" +
    "\005\uff9e\016\055\021\046\023\040\025\060\037\051\001" +
    "\002\000\020\003\267\005\uff9e\016\055\021\046\023\040" +
    "\025\060\037\051\001\002\000\020\003\267\005\uff9e\016" +
    "\055\021\046\023\040\025\060\037\051\001\002\000\020" +
    "\003\267\005\uff9e\016\055\021\046\023\040\025\060\037" +
    "\051\001\002\000\004\005\uff9f\001\002\000\004\005\uff9d" +
    "\001\002\000\004\005\uffa2\001\002\000\004\005\uffa6\001" +
    "\002\000\024\003\uffee\005\uffee\014\uffee\016\uffee\021\uffee" +
    "\023\uffee\024\uffee\025\uffee\037\uffee\001\002\000\004\005" +
    "\uffa1\001\002\000\004\005\uffa5\001\002\000\004\005\uffa4" +
    "\001\002\000\004\005\uffa0\001\002\000\004\005\uffa3\001" +
    "\002\000\024\031\065\035\064\037\073\047\074\054\062" +
    "\055\072\057\102\062\067\063\101\001\002\000\006\032" +
    "\305\060\106\001\002\000\004\004\135\001\002\000\030" +
    "\003\uffd1\005\uffd1\014\uffd1\015\311\016\uffd1\021\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\037\uffd1\066\307\001\002\000\004" +
    "\031\313\001\002\000\024\003\uffd4\005\uffd4\014\uffd4\016" +
    "\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4\037\uffd4\001\002" +
    "\000\004\004\135\001\002\000\024\003\uffd2\005\uffd2\014" +
    "\uffd2\016\uffd2\021\uffd2\023\uffd2\024\uffd2\025\uffd2\037\uffd2" +
    "\001\002\000\024\031\065\035\064\037\073\047\074\054" +
    "\062\055\072\057\102\062\067\063\101\001\002\000\006" +
    "\032\315\060\106\001\002\000\004\004\135\001\002\000" +
    "\030\003\uffd1\005\uffd1\014\uffd1\015\311\016\uffd1\021\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\037\uffd1\066\307\001\002\000" +
    "\024\003\uffd3\005\uffd3\014\uffd3\016\uffd3\021\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\037\uffd3\001\002\000\006\005\uffab\024" +
    "\uffab\001\002\000\006\005\uffaf\024\uffaf\001\002\000\006" +
    "\005\uffb0\024\uffb0\001\002\000\006\005\uffaa\024\uffaa\001" +
    "\002\000\006\005\uffae\024\uffae\001\002\000\004\047\326" +
    "\001\002\000\004\032\327\001\002\000\006\011\332\017" +
    "\331\001\002\000\024\003\uffd0\005\uffd0\014\uffd0\016\uffd0" +
    "\021\uffd0\023\uffd0\024\uffd0\025\uffd0\037\uffd0\001\002\000" +
    "\004\004\135\001\002\000\004\047\333\001\002\000\004" +
    "\004\135\001\002\000\004\010\335\001\002\000\004\037" +
    "\336\001\002\000\006\011\332\017\331\001\002\000\024" +
    "\003\uffcf\005\uffcf\014\uffcf\016\uffcf\021\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\037\uffcf\001\002\000\004\010\341\001\002" +
    "\000\004\037\342\001\002\000\024\003\uffce\005\uffce\014" +
    "\uffce\016\uffce\021\uffce\023\uffce\024\uffce\025\uffce\037\uffce" +
    "\001\002\000\004\042\344\001\002\000\014\047\024\054" +
    "\032\055\025\057\030\062\031\001\002\000\034\003\uffbd" +
    "\005\uffbd\006\uffbd\014\uffbd\016\uffbd\021\uffbd\023\uffbd\025" +
    "\uffbd\037\uffbd\044\215\056\uffbd\064\216\065\221\001\002" +
    "\000\026\003\ufffe\005\ufffe\006\006\014\ufffe\016\ufffe\021" +
    "\ufffe\023\ufffe\025\ufffe\037\ufffe\056\012\001\002\000\022" +
    "\003\ufffc\005\ufffc\014\ufffc\016\ufffc\021\ufffc\023\ufffc\025" +
    "\ufffc\037\ufffc\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\005\012\007\010\046\006\047\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\053\012\052\015" +
    "\042\026\047\027\051\031\043\035\040\036\056\037\044" +
    "\045\041\001\001\000\012\005\012\007\010\046\006\047" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\022\001\001\000\006" +
    "\006\032\011\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\032\011\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\323\012\052\015\042\026\047\027\051" +
    "\031\043\035\040\036\056\037\044\045\041\001\001\000" +
    "\026\003\322\012\052\015\042\026\047\027\051\031\043" +
    "\035\040\036\056\037\044\045\041\001\001\000\026\003" +
    "\321\012\052\015\042\026\047\027\051\031\043\035\040" +
    "\036\056\037\044\045\041\001\001\000\026\003\320\012" +
    "\052\015\042\026\047\027\051\031\043\035\040\036\056" +
    "\037\044\045\041\001\001\000\026\003\317\012\052\015" +
    "\042\026\047\027\051\031\043\035\040\036\056\037\044" +
    "\045\041\001\001\000\002\001\001\000\004\025\226\001" +
    "\001\000\026\003\223\012\052\015\042\026\047\027\051" +
    "\031\043\035\040\036\056\037\044\045\041\001\001\000" +
    "\002\001\001\000\026\003\172\012\052\015\042\026\047" +
    "\027\051\031\043\035\040\036\056\037\044\045\041\001" +
    "\001\000\026\003\171\012\052\015\042\026\047\027\051" +
    "\031\043\035\040\036\056\037\044\045\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\151\012\052" +
    "\015\042\026\047\027\051\031\043\035\040\036\056\037" +
    "\044\045\041\001\001\000\026\003\150\012\052\015\042" +
    "\026\047\027\051\031\043\035\040\036\056\037\044\045" +
    "\041\001\001\000\002\001\001\000\022\016\067\017\077" +
    "\020\076\021\065\022\075\023\070\024\062\027\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\021\146" +
    "\022\075\023\070\024\062\027\074\001\001\000\022\016" +
    "\144\017\077\020\076\021\143\022\075\023\070\024\062" +
    "\027\074\001\001\000\006\030\117\050\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\103\017" +
    "\077\020\076\021\065\022\075\023\070\024\062\027\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\017" +
    "\106\020\076\021\065\022\075\023\070\024\062\027\074" +
    "\001\001\000\002\001\001\000\016\020\110\021\065\022" +
    "\075\023\070\024\062\027\074\001\001\000\002\001\001" +
    "\000\010\023\113\024\062\027\074\001\001\000\014\021" +
    "\114\022\075\023\070\024\062\027\074\001\001\000\002" +
    "\001\001\000\004\030\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\022\121\023\070\024\062\027\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\042\126\043\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\131\001\001\000\002\001\001\000\004\013\133" +
    "\001\001\000\002\001\001\000\026\003\135\012\052\015" +
    "\042\026\047\027\051\031\043\035\040\036\056\037\044" +
    "\045\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\021\142\022\075\023\070\024\062\027\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\117\001" +
    "\001\000\006\030\117\050\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\027\204\040\201\044\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\027\204\040" +
    "\206\044\202\001\001\000\002\001\001\000\010\027\204" +
    "\040\210\044\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\213\001\001\000\006\051\216\052\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\221\001\001\000\002\001\001\000\006" +
    "\051\222\052\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\234\041\232\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\242\012\052" +
    "\015\042\026\047\027\051\031\043\035\040\036\056\037" +
    "\044\045\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\250\001\001\000\002\001\001\000\006\034\234" +
    "\041\252\001\001\000\002\001\001\000\004\014\254\001" +
    "\001\000\002\001\001\000\024\004\263\012\264\015\261" +
    "\027\265\031\260\035\256\036\267\037\262\045\257\001" +
    "\001\000\024\004\301\012\264\015\261\027\265\031\260" +
    "\035\256\036\267\037\262\045\257\001\001\000\024\004" +
    "\300\012\264\015\261\027\265\031\260\035\256\036\267" +
    "\037\262\045\257\001\001\000\024\004\277\012\264\015" +
    "\261\027\265\031\260\035\256\036\267\037\262\045\257" +
    "\001\001\000\024\004\276\012\264\015\261\027\265\031" +
    "\260\035\256\036\267\037\262\045\257\001\001\000\024" +
    "\004\275\012\264\015\261\027\265\031\260\035\256\036" +
    "\267\037\262\045\257\001\001\000\002\001\001\000\024" +
    "\004\273\012\264\015\261\027\265\031\260\035\256\036" +
    "\267\037\262\045\257\001\001\000\024\004\272\012\264" +
    "\015\261\027\265\031\260\035\256\036\267\037\262\045" +
    "\257\001\001\000\024\004\271\012\264\015\261\027\265" +
    "\031\260\035\256\036\267\037\262\045\257\001\001\000" +
    "\024\004\270\012\264\015\261\027\265\031\260\035\256" +
    "\036\267\037\262\045\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\303" +
    "\017\077\020\076\021\065\022\075\023\070\024\062\027" +
    "\074\001\001\000\002\001\001\000\004\013\305\001\001" +
    "\000\004\032\307\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\311\001\001\000\002\001\001\000\022" +
    "\016\313\017\077\020\076\021\065\022\075\023\070\024" +
    "\062\027\074\001\001\000\002\001\001\000\004\013\315" +
    "\001\001\000\004\032\316\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\327\001\001\000\002\001\001\000\004" +
    "\013\337\001\001\000\002\001\001\000\004\013\333\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\336" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\344" +
    "\001\001\000\006\051\345\052\217\001\001\000\012\005" +
    "\012\007\010\046\006\047\346\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    ArrayList<String> errores = new ArrayList();
    Node Padre = new Node("Root",1,1);
    ArrayList<String> Recursivo = new ArrayList();
    
    @Override
    public void report_error(String message, Object info) {
        StringBuffer sb = new StringBuffer();
        sb.append( message + ":");
        if (info instanceof java_cup.runtime.Symbol) {
            sb.append("  Column: " + ((Symbol)info).left  +  ", Line: " + ((Symbol)info).right +". Se encontró un Token Inesperado: " 
                + getToken(((Symbol)info).sym) +  ". ");
        }
        errores.add(sb+"");
        System.err.println(sb + "");        
    }

    private String getToken(int id) {
        try {
          Field [] field = sym.class.getFields();
          for (int i = 0; i < field.length; i++) {
            if (field[i].getInt(null) == id) {
              return field[i].getName();
            }
          }
        } catch (Exception e) {          
        }
        return "Token Desconocido, Fufupapachon ha quebrado del todo";
      }
    
      
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
      report_fatal_error("", null);
    }
    
    @Override
    public int error_sync_size(){
        return 1;
    }
    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // MainFunction ::= error MainFunction 
            {
              ArrayList<Node> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainFunction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MainFunction ::= 
            {
              ArrayList<Node> RESULT =null;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainFunction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // MainFunction ::= Asignar MainFunction 
            {
              ArrayList<Node> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(a);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainFunction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // MainFunction ::= Leer MainFunction 
            {
              ArrayList<Node> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(l);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainFunction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // MainFunction ::= Imprimir MainFunction 
            {
              ArrayList<Node> RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node imp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(imp);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainFunction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // MainFunction ::= FunCall MainFunction 
            {
              ArrayList<Node> RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node fc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(fc);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainFunction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // MainFunction ::= Switch MainFunction 
            {
              ArrayList<Node> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(s);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainFunction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // MainFunction ::= If MainFunction 
            {
              ArrayList<Node> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node i = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(i);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainFunction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MainFunction ::= While MainFunction 
            {
              ArrayList<Node> RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(w);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainFunction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MainFunction ::= For MainFunction 
            {
              ArrayList<Node> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(f);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainFunction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Main ::= error Main 
            {
              ArrayList<Node> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Main ::= 
            {
              ArrayList<Node> RESULT =null;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Main ::= Asignar Main 
            {
              ArrayList<Node> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(a);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Main ::= Leer Main 
            {
              ArrayList<Node> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(l);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Main ::= Imprimir Main 
            {
              ArrayList<Node> RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node imp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(imp);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Main ::= FunCall Main 
            {
              ArrayList<Node> RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node fc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(fc);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Main ::= FunctionPrime Main 
            {
              ArrayList<Node> RESULT =null;
		int fnpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fnpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node fnp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(fnp);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Main ::= Switch Main 
            {
              ArrayList<Node> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(s);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Main ::= If Main 
            {
              ArrayList<Node> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node i = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(i);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Main ::= While Main 
            {
              ArrayList<Node> RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(w);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Main ::= For Main 
            {
              ArrayList<Node> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        arreglo.add(f);
        if(m!= null){
            arreglo.addAll(m);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Leer ::= TK_SEMICOLON TK_INPUT ID 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node("Read", iright, ileft);
        Node temp2 = new Node("ID: " + id, idright, idleft);
        temp.addNode(temp2);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Leer",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ValorImpresion ::= FunCall 
            {
              Node RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node fc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = fc;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValorImpresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ValorImpresion ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(id + "", idright, idleft);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValorImpresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ImpContent ::= ValorImpresion 
            {
              ArrayList<Node> RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node vi = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(vi.getVal(), viright, vileft);
        arreglo.add(temp);
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImpContent",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ImpContent ::= ValorImpresion PLUS ImpContent 
            {
              ArrayList<Node> RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node vi = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int icleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> ic = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(vi.getVal(), viright, vileft);
        arreglo.add(temp);
        arreglo.addAll(ic);
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImpContent",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ImpContent ::= STRING 
            {
              ArrayList<Node> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(s + "", sright, sleft);
        arreglo.add(temp);
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImpContent",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ImpContent ::= STRING PLUS ImpContent 
            {
              ArrayList<Node> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int icleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> ic = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(s + "", sright, sleft);
        arreglo.add(temp);
        arreglo.addAll(ic);
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ImpContent",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Imprimir ::= TK_SEMICOLON TK_PRINT TK_LBRACK ImpContent TK_RBRACK 
            {
              Node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int icleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int icright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> ic = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Node temp = new Node(p + "", pright, pleft);
        temp.addListNode(ic);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Imprimir",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OperacionAsignar ::= TK_OPMAT 
            {
              Node RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(op + "", opright, opleft);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperacionAsignar",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OperacionAsignar ::= PLUS 
            {
              Node RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int masright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(mas + "", masright, masleft);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperacionAsignar",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OperacionAsignar ::= MINUS 
            {
              Node RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int minright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(min + "", minright, minleft);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperacionAsignar",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // AsignarValor ::= 
            {
              ArrayList<Node> RESULT =null;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsignarValor",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AsignarValor ::= OperacionAsignar Valor AsignarValor 
            {
              ArrayList<Node> RESULT =null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node oa = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> av = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(oa.getVal() + "", oaright, oaleft);
        Node temp2 = new Node(v.getVal() + "", vright, vleft);
        temp.addNode(temp2);
        arreglo.add(temp);
        if (av != null){
            arreglo.addAll(av);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsignarValor",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Asignar ::= TK_SEMICOLON ID TK_ASIG Valor AsignarValor 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> av = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(a + "", aright, aleft);
        Node temp2 = new Node("ID: " + id, idright, idleft);
        Node temp3 = new Node(v.getVal() + "", vright, vleft);
        temp.addNode(temp2);
        temp.addNode(temp3);
        if(av != null){
            temp.addListNode(av);
        }
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asignar",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ParametrosFuncionLlamada ::= ID 
            {
              ArrayList<Node> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node("ID: " + id, idright, idleft);
        arreglo.add(temp);
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosFuncionLlamada",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ParametrosFuncionLlamada ::= ID TK_COMMA ParametrosFuncionLlamada 
            {
              ArrayList<Node> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pflleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pflright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> pfl = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node("ID: " + id, idright, idleft);
        arreglo.add(temp);
        arreglo.addAll(pfl);
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosFuncionLlamada",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ParametrosFuncionLlamadaPrime ::= 
            {
              Node RESULT =null;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosFuncionLlamadaPrime",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ParametrosFuncionLlamadaPrime ::= ParametrosFuncionLlamada 
            {
              Node RESULT =null;
		int pflleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pflright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> pfl = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node("Parametros", pflright, pflleft);
        temp.addListNode(pfl);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosFuncionLlamadaPrime",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FunCall ::= TK_SEMICOLON ID TK_LPAREN ParametrosFuncionLlamadaPrime TK_RPAREN 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pflpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pflpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node pflp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        this.parser.Recursivo.add(id + "");
        Node temp = new Node("FunCall", idright, idleft);
        Node temp2 = new Node(id + "", idright, idleft);
        temp.addNode(temp2);
        if(pflp != null){
            temp.addNode(pflp);
        }
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Parametros ::= TK_VARIABLE_TIPO ID 
            {
              ArrayList<Node> RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node("Var", vtright, vtleft);
        Node temp2 = new Node(vt + "", vtright, vtleft);
        Node temp3 = new Node("ID: " + id, idright, idleft);
        temp.addNode(temp2);
        temp.addNode(temp3);
        arreglo.add(temp);
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Parametros ::= TK_ARRAY ID 
            {
              ArrayList<Node> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node("Var", aright, aleft);
        Node temp2 = new Node(a + "", aright, aleft);
        Node temp3 = new Node("ID: " + id, idright, idleft);
        temp.addNode(temp2);
        temp.addNode(temp3);
        arreglo.add(temp);
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Parametros ::= TK_ARRAY ID TK_COMMA Parametros 
            {
              ArrayList<Node> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> ps = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node("Var", aright, aleft);
        Node temp2 = new Node(a + "", aright, aleft);
        Node temp3 = new Node("ID: " + id, idright, idleft);
        temp.addNode(temp2);
        temp.addNode(temp3);
        arreglo.add(temp);
        arreglo.addAll(ps);
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Parametros ::= TK_VARIABLE_TIPO ID TK_COMMA Parametros 
            {
              ArrayList<Node> RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> ps = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node("Var", vtright, vtleft);
        Node temp2 = new Node(vt + "", vtright, vtleft);
        Node temp3 = new Node("ID: " + id, idright, idleft);
        temp.addNode(temp2);
        temp.addNode(temp3);
        arreglo.add(temp);
        arreglo.addAll(ps);
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ParametrosPrime ::= 
            {
              Node RESULT =null;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosPrime",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ParametrosPrime ::= Parametros 
            {
              Node RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> ps = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node("Parametros", psright, psleft);
        temp.addListNode(ps);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosPrime",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Function ::= TK_VARIABLE_TIPO ID TK_LPAREN ParametrosPrime TK_RPAREN TK_START Main TK_RETURN ID TK_END 
            {
              Node RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Node pp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Node tempo = new Node("Recursivo: ", idright, idleft);
        Node temp = new Node("func", idright, idleft);
        Node temp2 = new Node("ID: " + id, idright, idleft);
        Node temp3 = new Node("Tipo: " + vt, vtright, vtleft);
        Node temp4 = new Node(r + "", rright, rleft);
        Node temp5 = new Node("ID: " + id2, id2right, id2left);
        temp4.addNode(temp5);
        temp.addNode(temp3);
        temp.addNode(temp2);
        if(pp != null){
            temp.addNode(pp);
        }
        if(m != null){
            temp.addListNode(m);
        }
        temp.addNode(temp4);
        RESULT = temp;
        if(this.parser.Recursivo.size() != 0){
            for(int i = 0; i < this.parser.Recursivo.size(); i++){
                if(this.parser.Recursivo.get(i).equals(id + "")){
                    tempo.addNode(temp);
                    RESULT = tempo;
                }
            }
        }else{
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Function ::= ID TK_LPAREN ParametrosPrime TK_RPAREN BodyFunction 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node pp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> b = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node tempo = new Node("Recursivo: ", idright, idleft);
        Node temp = new Node("func", idright, idleft);
        Node temp2 = new Node(id + "", idright, idleft);
        temp.addNode(temp2);
        if(pp != null){
            temp.addNode(pp);
        }
        if(b != null){
            temp.addListNode(b);
        }
        RESULT = temp;
        if(this.parser.Recursivo.size() != 0){
            for(int i = 0; i < this.parser.Recursivo.size(); i++){
                if(this.parser.Recursivo.get(i).equals(id + "")){
                    tempo.addNode(temp);
                    RESULT = tempo;
                }
            }
        }else{
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FunctionPrime ::= TK_FUNC Function 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node func = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = func;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionPrime",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SwitchContent ::= TK_DEFAULT Body TK_BREAK TK_SEMICOLON 
            {
              ArrayList<Node> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Node> b = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(d + "", dright, dleft);
        if(b != null){
            temp.addListNode(b);
        }
        arreglo.add(temp);
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchContent",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SwitchContent ::= TK_CASE ID Body TK_BREAK TK_SEMICOLON SwitchContent 
            {
              ArrayList<Node> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Node> b = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> sc = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(c + "", cright, cleft);
        Node temp2 = new Node("ID: " + id, idright, idleft);
        temp.addNode(temp2);
        if(b != null){
            temp.addListNode(b);
        }
        arreglo.add(temp);
        arreglo.addAll(sc);
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchContent",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Switch ::= TK_SWITCH TK_LPAREN ID TK_RPAREN SwitchContent 
            {
              Node RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> sc = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(sw + "", swright, swleft);
        Node temp2 = new Node(id + "", idright, idleft);
        temp.addNode(temp2);
        temp.addListNode(sc);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Switch",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Else ::= 
            {
              ArrayList<Node> RESULT =null;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Else ::= TK_ELSE Body 
            {
              ArrayList<Node> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> b = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(e + "", eright, eleft);
        if(b != null){
            temp.addListNode(b);
        }
        arreglo.add(temp);
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Else ::= TK_ELSEIF TK_LPAREN BoolExp TK_RPAREN Body Else 
            {
              ArrayList<Node> RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node be = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> b = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> e = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(ei + "", eiright, eileft);
        temp.addNode(be);
        if(b != null){
            temp.addListNode(b);
        }
        arreglo.add(temp);
        if(e != null){
            arreglo.addAll(e);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // If ::= TK_IF TK_LPAREN BoolExp TK_RPAREN Body Else 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Node be = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> b = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> e = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(i + "", iright, ileft);
        temp.addNode(be);
        if(b != null){
            temp.addListNode(b);
        }
        if(e != null){
            temp.addListNode(e);
        }
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("If",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ArrayE ::= TK_LBRACK AritExp TK_RBRACK 
            {
              Node RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node ae = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = ae;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp ::= TK_LPAREN AritExp TK_RPAREN 
            {
              Node RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node ae = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = ae;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp ::= ArrayE 
            {
              Node RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ae = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = ae;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp ::= FunCall 
            {
              Node RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node fc = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = fc;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp ::= STRING 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(s + "", sright, sleft);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp ::= CHAR 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(c + "", cright, cleft);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp ::= INT 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(i + "", iright, ileft);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(id + "", idright, idleft);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MultiExp ::= Exp 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiExp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MultiExp ::= MultiExp TK_OPMAT Exp 
            {
              Node RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node me = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(op + "", opright, opleft);
        temp.addNode(me);
        temp.addNode(e);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiExp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Sor ::= PLUS 
            {
              Node RESULT =null;
		int maxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object max = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(max + "", maxright, maxleft);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Sor ::= MINUS 
            {
              Node RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int minright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(min + "", minright, minleft);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AritExp ::= MultiExp 
            {
              Node RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node me = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = me;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AritExp ::= AritExp Sor MultiExp 
            {
              Node RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node ae = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node sor = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node me = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
        Node temp = new Node(sor.getVal(), sorright, sorleft);
        temp.addNode(ae);
        temp.addNode(me);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AritExp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Operador ::= TK_OPLOG 
            {
              Node RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(op + "", opright, opleft);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Operador ::= TK_OPREL 
            {
              Node RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(op + "", opright, opleft);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BoolExp3 ::= OPREL_NOT TK_LPAREN BoolExp TK_RPAREN 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node be = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Node temp = new Node(n + "", nright, nleft);
        temp.addNode(be);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExp3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BoolExp3 ::= TK_LPAREN BoolExp TK_RPAREN 
            {
              Node RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node be = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT  = be;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExp3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BoolExp3 ::= BOOLEAN 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(b + "", bright, bleft);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExp3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BoolExp3 ::= AritExp Operador AritExp 
            {
              Node RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node ae = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node o = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ae2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ae2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node ae2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(o.getVal(), oright, oleft);
        temp.addNode(ae);
        temp.addNode(ae2);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExp3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BoolExp2 ::= BoolExp3 
            {
              Node RESULT =null;
		int be3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int be3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node be3 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = be3;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExp2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BoolExp2 ::= BoolExp2 AND BoolExp3 
            {
              Node RESULT =null;
		int be2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int be2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node be2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int andleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int andright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int be3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int be3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node be3 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(and + "", andright, andleft);
        temp.addNode(be2);
        temp.addNode(be3);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExp2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BoolExp ::= BoolExp2 
            {
              Node RESULT =null;
		int be2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int be2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node be2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = be2;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BoolExp ::= BoolExp OR BoolExp2 
            {
              Node RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node be = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int be2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int be2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node be2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(or + "", orright, orleft);
        temp.addNode(be);
        temp.addNode(be2);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolExp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // While ::= TK_WHILE TK_LPAREN BoolExp TK_RPAREN Body 
            {
              Node RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node be = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> b = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(w + "", wright, wleft);
        temp.addNode(be);
        if(b != null){
            temp.addListNode(b);
        }
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("While",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BodyFunction ::= TK_START MainFunction TK_END 
            {
              ArrayList<Node> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if(m != null){
            RESULT = m;
        }else{
            RESULT = null;
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BodyFunction",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Body ::= TK_START Main TK_END 
            {
              ArrayList<Node> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if(m != null){
            RESULT = m;
        }else{
            RESULT = null;
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // For ::= TK_FOR TK_LPAREN TK_VARIABLE_TIPO ID TK_ASIG INT TK_SEMICOLON ID TK_OPLOG INT TK_SEMICOLON ID TK_ADDLESS TK_RPAREN Body 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int vtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object ol = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> b = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(f + "", fright, fleft);
        Node temp1 = new Node(as + "", asright, asleft);
        Node temp2 = new Node("ID: " + id1, id1right, id1left);
        Node temp3 = new Node("Init: " + i1, i1right, i1left);
        temp1.addNode(temp2);
        temp1.addNode(temp3);
        Node temp4 = new Node("Operador: " + ol, olright, olleft);
        Node temp5 = new Node("ID: " + id2, id1right, id1left);
        Node temp6 = new Node("To: " + i2, i1right, i1left);
        temp4.addNode(temp5);
        temp4.addNode(temp6);
        Node temp7 = new Node("Add Less: " + al, alright, alleft);
        Node temp8 = new Node("ID: " + id3, id3right, id3left);
        temp7.addNode(temp8);
        temp.addNode(temp1);
        temp.addNode(temp4);
        temp.addNode(temp7);
        if(b != null){
            Node temp9 = new Node("Body", bright, bleft);
            temp9.addListNode(b);
            temp.addNode(temp9);
        }
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("For",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Content ::= Valor 
            {
              ArrayList<Node> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node("val: " + v.getVal(), vright, vleft);
        arreglo.add(temp);
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Content",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Content ::= Valor TK_COMMA Content 
            {
              ArrayList<Node> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> c = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node("val: " + v.getVal(), vright, vleft);
        arreglo.add(temp);
        if(c != null){
            arreglo.addAll(c);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Content",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ArrayContent ::= TK_LBRACK TK_RBRACK 
            {
              ArrayList<Node> RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayContent",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ArrayContent ::= TK_LBRACK Content TK_RBRACK 
            {
              ArrayList<Node> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> c = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        if(c != null){
            arreglo.addAll(c);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayContent",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Array ::= TK_ARRAY TK_DOT TK_VARIABLE_TIPO TK_DOT INT ID TK_ASIG ArrayContent 
            {
              ArrayList<Node> RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> ac = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(ar + "", arright, arleft);
        Node temp2 = new Node(vt + "", vtright, vtleft);
        Node temp3 = new Node("Size: " + i, iright, ileft);
        Node temp4 = new Node("ID: " + id, idright, idleft);
        temp.addNode(temp2);
        temp.addNode(temp3);
        temp.addNode(temp4);
        if(ac != null){
            temp.addListNode(ac);;
        }
        arreglo.add(temp);
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Array",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Valor ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(id + "", idright, idleft);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Valor ::= BOOLEAN 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(b + "", bright, bleft);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Valor ::= CHAR 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(c + "", cright, cleft);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Valor ::= STRING 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(s + "", sright, sleft);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Valor ::= INT 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Node temp = new Node(i + "", iright, ileft);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Valor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarMulti ::= Array VariablePrime 
            {
              ArrayList<Node> RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> ar = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> vp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        if(ar != null){
            arreglo.addAll(ar);
        }
        RESULT = arreglo;
        if(vp != null){
            arreglo.addAll(vp);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarMulti",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarMulti ::= TK_VARIABLE_TIPO ID TK_ASIG Valor AsignarValor VariablePrime 
            {
              ArrayList<Node> RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> av = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> vp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Node> arreglo = new ArrayList<Node>();
        Node temp = new Node(vt + "", vtright, vtleft);
        Node temp2 = new Node("ID: " + id, idright, idleft);
        Node temp3 = new Node(v.getVal() + "", vright, vleft);
        temp.addNode(temp2);
        temp.addNode(temp3);
        arreglo.add(temp);
        if (av != null){
            temp.addListNode(av);
        }
        if(vp != null){
            arreglo.addAll(vp);
        }
        RESULT = arreglo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarMulti",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Variables ::= VarMulti 
            {
              ArrayList<Node> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> v = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VariablePrime ::= 
            {
              ArrayList<Node> RESULT =null;
		
        RESULT = null;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariablePrime",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VariablePrime ::= Variables 
            {
              ArrayList<Node> RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Node> vs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = vs;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariablePrime",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Start ::= TK_START VariablePrime Main TK_END 
            {
              Node RESULT =null;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Node> vp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Node> m = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = parser.Padre;
        if(vp != null){
            Node temp = new Node("Var Init", vpright, vpleft);
            temp.addListNode(vp);
            RESULT.addNode(temp);
        }
        if(m != null){
            Node temp2 = new Node("Main", mright, mleft);
            temp2.addListNode(m);
            RESULT.addNode(temp2);    
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Start",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

